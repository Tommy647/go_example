// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ferrier1/network-device-grpc/internal/router (interfaces: Store)

// Package router is a generated GoMock package.
package router

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteRouter mocks base method.
func (m *MockStore) DeleteRouter(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouter", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouter indicates an expected call of DeleteRouter.
func (mr *MockStoreMockRecorder) DeleteRouter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouter", reflect.TypeOf((*MockStore)(nil).DeleteRouter), arg0)
}

// GetRouterByID mocks base method.
func (m *MockStore) GetRouterByID(arg0 string) (Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterByID", arg0)
	ret0, _ := ret[0].(Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterByID indicates an expected call of GetRouterByID.
func (mr *MockStoreMockRecorder) GetRouterByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterByID", reflect.TypeOf((*MockStore)(nil).GetRouterByID), arg0)
}

// InsertRouter mocks base method.
func (m *MockStore) InsertRouter(arg0 Router) (Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRouter", arg0)
	ret0, _ := ret[0].(Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRouter indicates an expected call of InsertRouter.
func (mr *MockStoreMockRecorder) InsertRouter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRouter", reflect.TypeOf((*MockStore)(nil).InsertRouter), arg0)
}
